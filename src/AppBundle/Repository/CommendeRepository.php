<?php

namespace AppBundle\Repository;
use AppBundle\Entity\PointVente; 
use AppBundle\Entity\Affectation;
use AppBundle\Entity\User; 
use AppBundle\Entity\Ressource;
use Doctrine\ORM\NoResultException;
/**
 * CommendeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommendeRepository extends \Doctrine\ORM\EntityRepository
{
	  	 public function findByAffectaion(Affectation $affectation=null){
           $qb = $this->createQueryBuilder('c')
           ->where('c.affectation=:affectation')
           ->andWhere('c.date is null or c.date>=:startDate')
           ->setParameter('startDate', new \DateTime('first day of last month'))
           ->setParameter('affectation', $affectation)
           ->orderby('c.date','asc');
         return $qb->getQuery()->getResult();  
  }

  	  	public function findList(
          User $user=null, 
          PointVente $pointVente=null,
          Ressource $ressource=null,
           $insident=null,
           $startDate=null,
           $endDate=null,
           $region=null
         ){
           $qb = $this->createQueryBuilder('c')->join('c.affectation','p')->leftJoin('p.pointVente', 'pdv');
          if($region!=null){
              $qb->andWhere('pdv.ville=:ville or pdv.ville is NULL')->setParameter('ville', $region);
          }           
           if($pointVente!=null){
           $qb ->andWhere('p.pointVente=:pointVente')->setParameter('pointVente', $pointVente);
            }
           if($ressource!=null){
           $qb ->andWhere('p.ressource=:ressource')->setParameter('ressource', $ressource);
            }
           if($insident!=null){
            $qb ->andWhere('c.typeInsident=:typeInsident')->setParameter('typeInsident', $insident);
            }
           if($user!=null){
           $qb ->andWhere('p.user=:user')->setParameter('user', $user);
            }            
             if($startDate!=null){
           $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }
         return $qb->getQuery()->getResult();  
  }


 

      public  function rapports($startDate=null, $endDate=null,$region=null){
        $qb = $this->createQueryBuilder('c')->join('c.affectation','p')->leftJoin('p.pointVente', 'pdv');
          if($region!=null){
              $qb->andWhere('pdv.ville=:ville or pdv.ville is NULL')->setParameter('ville', $region);
          }

         if($startDate!=null){
              $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }     
         $qb->select('c.typeInsident')
         ->addSelect('count(c.id) as nombre')
         ->addGroupBy('c.typeInsident');
           return $qb->getQuery()->getArrayResult(); 
  } 

 


    public   function workedDays($startDate=null, $endDate=null,$region=null){

        $qb = $this->createQueryBuilder('c')
        ->join('c.user', 'u')
        ->join('c.affectation','a')
        ->leftJoin('a.pointVente', 'pdv')
        ->join('c.lignes','l');
        if($region!=null){
              $qb->andWhere('pdv.ville=:ville or pdv.ville is NULL')->setParameter('ville', $region);
          }
         if($startDate!=null){
              $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }     
         $qb->select('p.id')
         ->addSelect('p.nom')
         ->addSelect('p.telephone')
         ->addSelect('u.id as idsup')
         ->addSelect('u.nom as superviseur')
         ->addSelect('sum(l.quantite) as nombre')
         ->addSelect('count(DISTINCT c.date) as nombrejours')
         ->addGroupBy('p.id')
         ->addGroupBy('p.nom')
         ->addGroupBy('p.telephone')
         ->addGroupBy('u.nom')
         ->addGroupBy('u.id');
        return $qb->getQuery()->getArrayResult(); 
  } 



    public   function totalWorkedDays($startDate=null, $endDate=null,$region=null){

        $qb = 
        $this->createQueryBuilder('c')
        ->leftJoin('c.affectation', 'a')
        ->leftJoin('a.pointVente', 'pdv');
         if($region!=null){
              $qb->andWhere('pdv.ville=:ville or pdv.ville is NULL')->setParameter('ville', $region);
          }       
         if($startDate!=null){
              $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
             $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          }     
   try {
    $qb->select('count(DISTINCT c.date) as nombrejours');
         return $qb->getQuery()->getSingleScalarResult();  
   } catch (NoResultException $e) {
        return 0;
     }
  } 
  
  public   function isThere($id, $startDate){
        $qb = $this->createQueryBuilder('c')->join('c.affectation','p')->leftJoin('p.pointVente', 'pdv')
        ->andWhere('pdv.id=:id')->setParameter('id', $id)
        ->andWhere('c.date=:startDate')->setParameter('startDate', new \DateTime($startDate));     
   try {
    $qb->select('count(DISTINCT c.date) as nombre');
         return $qb->getQuery()->getSingleScalarResult();  
   } catch (NoResultException $e) {
        return 0;
     }
  } 

}
